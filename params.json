{
  "name": "SPScript",
  "tagline": "Speed up your SharePoint development.",
  "body": "SPScript\r\n=========\r\n----------\r\n\r\nSPScript is a collection of javascript helpers for the SharePoint 2013 Rest API.  Some features include...\r\n\r\n  - Easy querying of list data with helpers for making either same-origin or cross-origin requests.\r\n  - Add and Update list items in 1 line of code.\r\n  - Easily utilize SharePoint search\r\n  - Integrated templating engine\r\n  - Chrome control helper to make your app look more like the host SharePoint site.\r\n\r\n\r\nIncluding SPScript in your project\r\n--------------\r\n\r\nOption 1: NPM Module\r\n```\r\n>> npm install spscript\r\n\r\n```\r\n\r\nOption 2: Traditional Include\r\n\r\n - __Dev__ - Add the following script tag to your page\r\n     - `<script type=\"text/javascript\" src='https://cdn.rawgit.com/DroopyTersen/spscript/dist/v2/spscript.js'></script>`\r\n - __Prod__ - Save the following file into your project\r\n-      https://raw.githubusercontent.com/DroopyTersen/spscript/dist/v2/spscript.js\r\n\r\n\r\nInitialization\r\n--------------\r\nAll you need is the url of the SharePoint site you are targeting.\r\n```javascript\r\nvar siteUrl = \"http://urltomysharepointsite.com\";\r\nvar dao = new SPScript.RestDao(siteUrl);\r\n```\r\n\r\nMethods\r\n--------------\r\n\r\n#### Web\r\n- `web.info()` - Gets you the [SPWeb properties](https://msdn.microsoft.com/en-us/library/office/jj245288.aspx#properties) of your site\r\n- `web.subsites()` - Gets you all the sub sites and their [SPWeb properties](https://msdn.microsoft.com/en-us/library/office/jj245288.aspx#properties)\r\n- `web.permissions()` - Gets you an an array of permissions that have been setup for that site. Each permission object has a `member` (the user or group) and a `roles` array (the permissions that user or group has). \r\n- `web.permissions(email)` - Looks up a user by their email address, then gets you a list of permissions that user has for your site.  Similiar to \"Check Permissions\". \r\n\r\n#### Lists\r\n- `lists()` - gets you all the lists and libraries on your site and their [SPList properties](https://msdn.microsoft.com/en-us/library/office/jj245826.aspx#properties)\r\n- `lists(listname)` - gets you a list object for a specific list.  See the '__List__' methods for what you can do with this object\r\n\r\n#### List\r\n- `list.info()` - gets you that list's [SPList properties](https://msdn.microsoft.com/en-us/library/office/jj245826.aspx#properties)\r\n- `list.getItems()` - gets you all the items in that list\r\n- `list.getItems(odata)` - gets all the items in that list based on the [OData](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/) you pass in.  This allows you to trim selection, filter, sort etc..\r\n- `list.getItemById(id)` - gets you a specific item based on the SharePoint Id\r\n- `list.findItems(key, value)` - gets you all items whose field(key) matches the value. Currently only text and number columns are supported.\r\n- `list.findItems(key, value, extraOdata)` - gets you all items whose field(key) matches the value. Currently only text and number columns are supported.\r\n- `list.findItem(key, value)` - get you an item whose field(key) matches the value. If multiple matches are found, the first is returned.  Currently only text and number columns are supported.\r\n- `list.addItem(item)` - takes a javascript object and creates a list item.\r\n- `list.updateItem(id, updates)` - takes a SharePoint Id, and updates that item ONLY with properties that are found in the passed in `updates` object.\r\n- `list.deleteItem(id)` - deletes the item with the specified SharePoint Id\r\n- `list.permissions()` - Gets you an an array of permissions that have been setup for that list. Each permission object has a `member` (the user or group) and a `roles` array (the permissions that user or group has). \r\n- `list.permissions(email)` - Looks up a user by their email address, then gets the permissions that user has for that list.  Similiar to \"Check Permissions\". \r\n\r\n\r\n#### Search\r\n- `search.query(queryText)` - performs a SharePoint search and returns a `SearchResults`  object which contains elapsedTime, suggestion, resultsCount, totalResults, totalResultsIncludingDuplicates, items. The `items` property is what contains the actual \"results\" array.\r\n- `search.query(queryText, queryOptions)` - same as `query(queryText)` but with the ability to override default search options.\r\n- `search.people(queryText)` limits the search to just people\r\n\r\n#### Profiles\r\n- `profiles.current()` - gets you all the profile properties for the current user\r\n- `profiles.getByEmail(email)` - looks up a user based on their email and returns their profile properties\r\n- `profiles.setProperty(user, key, value)` - sets a profile property (key) for the specified user.  User object should have `AccountName` or `LoginName` property\r\n- `profiles.setProperty(email, key, value)` - sets a profile property (key) for the user tied to that email address\r\n\r\n#### Utils\r\n- `utils.waitForLibrary(namespace)` - waits for the library to be on the page\r\n- `utils.waitForLibraries(namespaces)` - waits for all libraries to be on the page\r\n- `utils.getScript(url)` - loads a javascript file onto the page\r\n- `utils.getScripts(urls)` - loads multiple javascript files onto the page\r\n\r\n#### Query String Helpers\r\n- `queryString.toObj(str)` - returns a javascript object. Each query string key is a property on the object.\r\n- `queryString.fromObj(str)` - turns a javascript object into a string in format of \"key1=value1&key2=value2\"\r\n\r\n#### Templating\r\n- `templating.renderTemplate(template, item)` - returns an html string. `template` is an html string with `{{property}}` placeholders. `item` is a javascript object whose properties will be used to fill in your html placeholders.\r\n\r\n\r\n***\r\n\r\nUsage Examples\r\n--------------\r\n\r\n#### Query List Items\r\nGet all **\"Tasks\"** with a status of **\"Approved\"**\r\n```javascript\r\nvar taskList = dao.lists(\"Tasks\")\r\n\r\n// BEST: Option 1 - 'Find' syntax sugar\r\ntaskList.findItems(\"Status\", \"Approved\").then(logApprovedTasks);\r\n\r\n// BETTER: Option 2 - OData support in the '.items()'\r\ntaskList.getItems(\"$filter=Status eq 'Approved'\").then(logApprovedTasks);\r\n\r\n// GOOD: Options 3 - Manual 'GET'\r\ndao.get(\"/web/lists/getByTitle('Tasks')?$filter=Status eq 'Approved'\").then(function(data){\r\n    if (data && data.d && data.d.results) {\r\n        logApprovedTasks(data.d.results);    \r\n    }\r\n});\r\n\r\nvar logApprovedTasks = function(tasks) {\r\n    tasks.forEach(function(task){\r\n        console.log(task.Title);\r\n    });\r\n};\r\n```\r\n\r\n#### Get Item By Id\r\nGet the task with a SharePoint ID of 29\r\n```javascript\r\ndao.lists(\"Tasks\").getItemById(29).then(displayTask);\r\nvar displayTask = function(task) {\r\n    //blah blah blah\r\n}\r\n\r\n```\r\n#### Add List Item\r\nAdd item to the **\"Tasks\"** list\r\n```javascript\r\nvar newItem = { \r\n    Title: \"My New Task\", \r\n    Status: \"Not Started\", \r\n    RemainingHours: 12 \r\n};\r\ndao.lists(\"Tasks\").addItem(newItem);\r\n\r\n```\r\n\r\n#### Update List Item\r\nUpdate item in the **\"Tasks\"** list.  Set item 29's status to **\"Completed\"**\r\n```javascript\r\nvar updates = { Status: \"Completed\", RemainingHours: 0 };\r\ndao.lists(\"Tasks\").updateItem(29, updates);\r\n\r\n```\r\n\r\n#### Find One\r\nGet the one item whose **\"RequestId\"** is **\"abc123\"**\r\n```javascript\r\ndao.lists(\"IT Requests\")\r\n    .findItem(\"RequestId\", \"abc123\")\r\n    .then(function(request){\r\n        console.log(request.RequestId + \": \" + request.Title);\r\n    });\r\n\r\n```\r\nIf there is more than one match, it will return the first result.  If there are zero matches, it will return `null`\r\n\r\n#### Get Every List Item\r\nGet all items in the **\"Tasks\"** list and log the 'Title'\r\n```javascript\r\ndao.lists(\"Tasks\")\r\n    .getItems()\r\n    .then(function(tasks){\r\n        tasks.forEach(function(task){\r\n            console.log(task.Title);\r\n        });\r\n    });\r\n\r\n```\r\n\r\n#### GET & POST Requests\r\nEvery REST Api call that SharePoint supports can be called using SPService. Both the RestDao and CrossDomainDao implement a `.get()` and `post()` method that allow you to type in the api call's relative url.  For example, you could rewrite the code above as:\r\n```javascript\r\ndao.get(\"/web/lists/getByTitle('Tasks')/items\").then(function(data){\r\n    var tasks = data.d.results;\r\n    tasks.forEach(function(task){\r\n        console.log(task.Title);\r\n    });\r\n});\r\n```\r\n#### Profiles\r\nGet the current user's profile properties\r\n```javascript\r\ndao.profiles.current().then(function(profile){\r\n    console.log(JSON.stringify(profile));\r\n});\r\n```\r\n#### Search\r\nSearch for **\"petersen\"** and get the url of each search result\r\n```javascript\r\ndao.search.query('petersen').then(function(searchResults){\r\n    searchResults.items.forEach(function(item){\r\n        console.log(item.FileRef);\r\n    });\r\n});\r\n```\r\n\r\nSearch for People named **\"petersen\"**\r\n```javascript\r\ndao.search.people('petersen').then(function(searchResults){\r\n    console.log(\"There are \" + searchResults.totalResults + \" people named 'andrew'\");\r\n});\r\n```\r\n\r\n####Templating\r\nSPScript contains a lightweigt templating engine.  This allows you start with html with ``{{property}}` placeholders and then fill in the values and display on the page after you have finished getting all your REST data.\r\n\r\nDisplay document name and category on the page\r\n\r\nStep 1: Create the html container\r\n\r\n```html\r\n<div id='docs-webpart'><!-- Template html will be injected here --></div>\r\n```\r\nStep 2: Create a template using a script tag with a custom type\r\n\r\n```html\r\n<script type='custom/template' id='doc-template'>\r\n    <div class='document'>\r\n        <a href='{{FileRef}}'>\r\n            <h3>{{FileRef}}</h3>\r\n            <h4>{{Category}}</h4>\r\n        </a>\r\n    </div>\r\n</script>\r\n```\r\n\r\nStep 3: Use the RestDao to get the documents, and the templating to render them on the page.\r\n\r\n```javascript\r\n//select our template\r\nvar template = $(\"#doc-template\").html();\r\n\r\n//Get our documents\r\ndao.lists(\"Documents\").getItems().then(function(docs){\r\n    var html = \"\";\r\n\r\n    //foreach document, create the html based on our template\r\n\r\n    docs.forEach(function(doc){\r\n        html += SPScript.templating.renderTemplate(template, doc);\r\n    });\r\n\r\n    //Output all the html to the page inside of our container\r\n    $(\"#docs-webpart\").html(html);\r\n});\r\n```\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}